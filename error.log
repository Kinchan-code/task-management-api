{"level":"info","message":"User created successfully: 673e0b0ffc77e1cc22f8de22"}
{"level":"info","message":"User created successfully: 673e0b0ffc77e1cc22f8de22"}
{"level":"error","message":"Error creating user: CustomError: User already exists","stack":"CustomError: User already exists\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:15:13\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:5:58)"}
{"level":"error","message":"Error creating user: CustomError: User already exists"}
{"level":"info","message":"User created successfully: 673e0b6bdb59e520c4bf8cbc"}
{"level":"info","message":"User created successfully: 673e0b6bdb59e520c4bf8cbc"}
{"level":"error","message":"Error creating user: CustomError: User already exists","stack":"CustomError: User already exists\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:15:13\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:5:58)"}
{"level":"error","message":"Error creating user: CustomError: User already exists"}
{"level":"error","message":"Error logging in user: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"email\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"password\"\n    ],\n    \"message\": \"Required\"\n  }\n]"}
{"level":"error","message":"Error verifying session token: CustomError: Unauthorized - no session cookie found"}
{"level":"error","message":"Error checking session cookie: CustomError: Unauthorized - no session cookie found"}
{"level":"error","message":"Error changing password: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"currentPassword\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"newPassword\"\n    ],\n    \"message\": \"Required\"\n  }\n]"}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error changing password: PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\user.service.ts:81:36\n\n  78 ) => {\n  79   try {\n  80     // Find user by id\n→ 81     const user = await prisma.user.findUnique({\n           where: {\n             id: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   projects?: ProjectListRelationFilter\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?."}
{"level":"error","message":"Error generating refresh token: Error: REFRESH_TOKEN_SECRET is not defined in environment variables"}
{"level":"error","message":"Error generating token: CustomError: Failed to generate refresh token","stack":"CustomError: Failed to generate refresh token\n    at generateRefreshToken (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateRefreshToken.ts:30:11)\n    at generateTokenAndSetCookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:32:46)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:84:30\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:5:58)"}
{"level":"error","message":"Error logging in user: CustomError: Failed to generate refresh token"}
{"level":"error","message":"Error generating refresh token: Error: REFRESH_TOKEN_SECRET is not defined in environment variables"}
{"level":"error","message":"Error generating token: CustomError: Failed to generate refresh token","stack":"CustomError: Failed to generate refresh token\n    at generateRefreshToken (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateRefreshToken.ts:30:11)\n    at generateTokenAndSetCookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:32:46)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:84:30\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:5:58)"}
{"level":"error","message":"Error logging in user: CustomError: Failed to generate refresh token"}
{"level":"error","message":"Error generating refresh token: Error: REFRESH_TOKEN_SECRET is not defined in environment variables"}
{"level":"error","message":"Error generating token: CustomError: Failed to generate refresh token","stack":"CustomError: Failed to generate refresh token\n    at generateRefreshToken (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateRefreshToken.ts:30:11)\n    at generateTokenAndSetCookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:32:46)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:84:30\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:5:58)"}
{"level":"error","message":"Error logging in user: CustomError: Failed to generate refresh token"}
{"level":"error","message":"Error generating refresh token: Error: REFRESH_TOKEN_SECRET is not defined in environment variables"}
{"level":"error","message":"Error generating token: CustomError: Failed to generate refresh token","stack":"CustomError: Failed to generate refresh token\n    at generateRefreshToken (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateRefreshToken.ts:30:11)\n    at generateTokenAndSetCookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:32:46)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:84:30\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\user.controller.ts:5:58)"}
{"level":"error","message":"Error logging in user: CustomError: Failed to generate refresh token"}
{"level":"info","message":"Project created successfully: 6740b6c7ca0bf99d5584ecff"}
{"level":"info","message":"Project created successfully: 6740b849e6c13b0746989138"}
{"level":"info","message":"Project created successfully: 6740bb7ced8e0e7c97dfe5a0"}
{"level":"error","message":"Error verifying refresh token: PrismaClientValidationError: \nInvalid `prisma.refreshToken.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\middlewares\\verifyRefreshToken.ts:28:51\n\n  25 }\n  26 try {\n  27   // Check if the refresh token is valid in the database\n→ 28   const storedToken = await prisma.refreshToken.findUnique({\n         where: {\n           token: {}\n                  ~~\n         }\n       })\n\nArgument `token`: Invalid value provided. Expected String, provided Object."}
{"level":"error","message":"Error verifying refresh token: PrismaClientValidationError: \nInvalid `prisma.refreshToken.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\middlewares\\verifyRefreshToken.ts:28:51\n\n  25 }\n  26 try {\n  27   // Check if the refresh token is valid in the database\n→ 28   const storedToken = await prisma.refreshToken.findUnique({\n         where: {\n           token: {}\n                  ~~\n         }\n       })\n\nArgument `token`: Invalid value provided. Expected String, provided Object."}
{"level":"error","message":"Error verifying refresh token: PrismaClientValidationError: \nInvalid `prisma.refreshToken.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\middlewares\\verifyRefreshToken.ts:28:51\n\n  25 }\n  26 try {\n  27   // Check if the refresh token is valid in the database\n→ 28   const storedToken = await prisma.refreshToken.findUnique({\n         where: {\n           token: {}\n                  ~~\n         }\n       })\n\nArgument `token`: Invalid value provided. Expected String, provided Object."}
{"level":"error","message":"Error verifying refresh token: PrismaClientValidationError: \nInvalid `prisma.refreshToken.findUnique()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\middlewares\\verifyRefreshToken.ts:28:51\n\n  25 }\n  26 try {\n  27   // Check if the refresh token is valid in the database\n→ 28   const storedToken = await prisma.refreshToken.findUnique({\n         where: {\n           token: {}\n                  ~~\n         }\n       })\n\nArgument `token`: Invalid value provided. Expected String, provided Object."}
{"level":"error","message":"Error generating token: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client","stack":"Error: Cannot set headers after they are sent to the client\n    at ServerResponse.setHeader (node:_http_outgoing:652:11)\n    at ServerResponse.header (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:794:10)\n    at ServerResponse.append (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:755:15)\n    at ServerResponse.res.cookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:892:8)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:41:9\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:5:58)"}
{"level":"error","message":"Error generating token: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client","stack":"Error: Cannot set headers after they are sent to the client\n    at ServerResponse.setHeader (node:_http_outgoing:652:11)\n    at ServerResponse.header (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:794:10)\n    at ServerResponse.append (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:755:15)\n    at ServerResponse.res.cookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:892:8)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:38:9\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:5:58)"}
{"level":"error","message":"Error generating token: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client","stack":"Error: Cannot set headers after they are sent to the client\n    at ServerResponse.setHeader (node:_http_outgoing:652:11)\n    at ServerResponse.header (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:794:10)\n    at ServerResponse.append (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:755:15)\n    at ServerResponse.res.cookie (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\node_modules\\express\\lib\\response.js:892:8)\n    at C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:39:9\n    at Generator.next (<anonymous>)\n    at fulfilled (C:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\utils\\generateToken.ts:5:58)"}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:70:43\n\n  67 const skip = (page - 1) * limit;\n  68 \n  69 // Get all projects\n→ 70 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         take: 10,\n         ~~~~\n     ?   AND?: ProjectWhereInput | ProjectWhereInput[],\n     ?   OR?: ProjectWhereInput[],\n     ?   NOT?: ProjectWhereInput | ProjectWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   name?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   dueDate?: DateTimeNullableFilter | DateTime | Null,\n     ?   progress?: IntFilter | Int,\n     ?   priority?: EnumProjectPriorityFilter | ProjectPriority,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   deletedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   author?: UserRelationFilter | UserWhereInput\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       }\n     })\n\nUnknown argument `take`. Did you mean `name`? Available options are marked with ?."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:87:43\n\n  84 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  85 \n  86 // Get all projects\n→ 87 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         name: {\n           contains: \"sample\",\n           mode: \"insensitive\"\n         },\n         description: {\n           contains: \"sample\",\n           mode: \"insensitive\"\n         },\n         priority: {\n           contains: \"sample\",\n           ~~~~~~~~\n           mode: \"insensitive\",\n     ?     equals?: ProjectPriority | EnumProjectPriorityFieldRefInput,\n     ?     in?: ProjectPriority[] | ListEnumProjectPriorityFieldRefInput,\n     ?     notIn?: ProjectPriority[] | ListEnumProjectPriorityFieldRefInput,\n     ?     not?: ProjectPriority | NestedEnumProjectPriorityFilter\n         },\n         status: {\n           contains: \"sample\",\n           mode: \"insensitive\"\n         }\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:87:43\n\n  84 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  85 \n  86 // Get all projects\n→ 87 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         OR: [\n           {\n             name: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             description: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             priority: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           }\n         ]\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:87:43\n\n  84 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  85 \n  86 // Get all projects\n→ 87 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         OR: [\n           {\n             name: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             description: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             priority: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           }\n         ]\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nUnknown argument `contains`. Available options are marked with ?."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:87:43\n\n  84 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  85 \n  86 // Get all projects\n→ 87 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         OR: [\n           {\n             name: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             description: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             priority: {\n               equals: \"sample project 2\"\n             }\n           }\n         ]\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nInvalid value for argument `equals`. Expected ProjectPriority."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:87:43\n\n  84 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  85 \n  86 // Get all projects\n→ 87 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         OR: [\n           {\n             name: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             description: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             priority: {\n               equals: \"sample project 2\"\n             }\n           }\n         ]\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nInvalid value for argument `equals`. Expected ProjectPriority."}
{"level":"error","message":"Error fetching projects: PrismaClientValidationError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\controllers\\project.controller.ts:89:43\n\n  86 const limitNumber = limit ? parseInt(limit as string) : undefined;\n  87 \n  88 // Get all projects\n→ 89 const projects = await prisma.project.findMany({\n       where: {\n         authorId: \"673e0b6bdb59e520c4bf8cbc\",\n         OR: [\n           {\n             name: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             description: {\n               contains: \"sample project 2\",\n               mode: \"insensitive\"\n             }\n           },\n           {\n             priority: {\n               equals: \"sample project 2\"\n             }\n           }\n         ]\n       },\n       include: {\n         author: {\n           select: {\n             id: true,\n             name: true\n           }\n         }\n       },\n       take: undefined,\n       skip: undefined\n     })\n\nInvalid value for argument `equals`. Expected ProjectPriority."}
{"level":"info","message":"Project created successfully: 6741fa4d08ff5621def19dd0"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"error","message":"Error logging in user: CustomError: Invalid email or password"}
{"level":"info","message":"Project created successfully: 6749cd1a2ee4b05354bf3090"}
{"level":"error","message":"Error getting all projects: PrismaClientUnknownRequestError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\project.service.ts:79:43\n\n  76 });\n  77 \n  78 // Get all projects\n→ 79 const projects = await prisma.project.findMany(\nAttempted to serialize non-enum-compatible value 'null' for enum 'ProjectStatus'"}
{"level":"error","message":"Error fetching projects: CustomError: Internal server error"}
{"level":"error","message":"Error getting all projects: PrismaClientUnknownRequestError: \nInvalid `prisma.project.findMany()` invocation in\nC:\\Users\\Christian\\OneDrive\\Documents\\Code\\task-management\\src\\services\\project.service.ts:79:43\n\n  76 });\n  77 \n  78 // Get all projects\n→ 79 const projects = await prisma.project.findMany(\nAttempted to serialize non-enum-compatible value 'null' for enum 'ProjectStatus'"}
{"level":"error","message":"Error fetching projects: CustomError: Internal server error"}
{"level":"info","message":"Project created successfully: 6749d0992ea227487d3dfd7c"}
{"level":"info","message":"Project created successfully: 6749d5d5ebe6bdd41d4482e5"}
{"level":"error","message":"Error updating project: [\n  {\n    \"expected\": \"'pending' | 'in_progress' | 'completed'\",\n    \"received\": \"undefined\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"status\"\n    ],\n    \"message\": \"Status is required\"\n  }\n]"}
{"level":"error","message":"Error creating task: RangeError: Invalid time value"}
{"level":"error","message":"Error creating task: RangeError: Invalid time value"}
{"level":"error","message":"Error creating task: RangeError: Invalid time value"}
{"level":"error","message":"Error creating task: RangeError: Invalid time value"}
{"level":"error","message":"Error creating task: RangeError: Invalid time value"}
{"level":"info","message":"Project created successfully: 6749e442250ea8d8f336727e"}
{"level":"error","message":"Error creating task: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"date\",\n    \"path\": [\n      \"dueDate\"\n    ],\n    \"message\": \"Expected string, received date\"\n  }\n]"}
{"level":"error","message":"Error creating task: CustomError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"date\",\n    \"path\": [\n      \"dueDate\"\n    ],\n    \"message\": \"Expected string, received date\"\n  }\n]"}
{"level":"error","message":"Error getting tasks: RangeError: Invalid time value"}
{"level":"error","message":"Error getting tasks: RangeError: Invalid time value"}
{"level":"error","message":"Error getting tasks: RangeError: Invalid time value"}
{"level":"error","message":"Error getting tasks: CustomError: Tasks not found"}
{"level":"error","message":"Error getting tasks: CustomError: Tasks not found"}
{"level":"error","message":"Error getting task by id: CustomError: Task not found"}
{"level":"error","message":"Error getting task by id: CustomError: Task not found"}
{"level":"error","message":"Error updating task: CustomError: Task not found"}
{"level":"error","message":"Error updating task: CustomError: Task not found"}
